plugins {
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'org.springframework.boot' version '2.2.6.RELEASE' apply false
    id 'com.google.cloud.tools.jib' version '2.1.0' apply false
}

ext {
    maasVersion = '0.0.1-SNAPSHOT'
    lombokVersion = '1.18.12'
    mapstructVersion = '1.3.1.Final'
    springBootVersion = '2.2.6.RELEASE'
    springCloudVersion = 'Hoxton.SR3'
    springDocVersion = '1.3.0'
    camundaVersion = '7.13.0-alpha2'
    nimbusJoseJwtVersion = '8.11'
    vtPasswordVersion = '3.1.2'
    mockneatVersion = '0.3.8'
    h2Version = '1.4.200'
    activationVersion = '1.1.1'
    testcontainersVersion = '1.13.0'
    reactorTestVersion = '3.3.4.RELEASE'
}

allprojects {
    apply plugin: 'project-report'
    // needed because of multi-module configuration
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }

    dependencyManagement {
        dependencies {
            //Server
            imports {
                mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
                mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudVersion}"
            }

            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "org.mapstruct:mapstruct:${mapstructVersion}"
            dependency "org.mapstruct:mapstruct-processor:${mapstructVersion}"

            dependency "org.springdoc:springdoc-openapi-webflux-core:${springDocVersion}"
            dependency "org.springdoc:springdoc-openapi-webflux-ui:${springDocVersion}"

            dependency "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:${camundaVersion}"
            dependency "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:${camundaVersion}"
            dependency "org.camunda.bpm:camunda-engine-plugin-connect:${camundaVersion}"
            dependency "org.camunda.bpm:camunda-engine-plugin-spin:${camundaVersion}"

            dependency "com.nimbusds:nimbus-jose-jwt:${nimbusJoseJwtVersion}"
            dependency "edu.vt.middleware:vt-password:${vtPasswordVersion}"
            dependency "net.andreinc.mockneat:mockneat:${mockneatVersion}"

            dependency "com.h2database:h2:${h2Version}"
            dependency "javax.activation:activation:${activationVersion}"

            //Test
            dependency "org.testcontainers:testcontainers:${testcontainersVersion}"
            dependency "org.testcontainers:junit-jupiter:${testcontainersVersion}"
            dependency "io.projectreactor:reactor-test:${reactorTestVersion}"
        }
    }
}

// assumed that all subprojects are java-based modules
subprojects {
    apply from: "${rootDir}/gradle/java.gradle"
    apply from: "${rootDir}/gradle/checkstyle.gradle"

    dependencies {
        implementation 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.mapstruct:mapstruct'
        annotationProcessor 'org.mapstruct:mapstruct-processor'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled false
        }
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

// https://github.com/codecov/example-gradle#-do-you-support-multi-module-projects
codeCoverageReport.dependsOn {
    subprojects*.test
}

wrapper {
    gradleVersion = "6.3"
}